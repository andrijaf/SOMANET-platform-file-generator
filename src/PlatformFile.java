import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.xml.sax.SAXException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.*;

/**
 * Created by afeher on 9/22/14.
 */
public class PlatformFile {

    private Document document = null;
    private Integer globalXMLPackageCounter = 0;
    private Integer globalXMLNodeCounter = 0;

    List<SomanetNodeElementContainer> somanetNodes = new ArrayList<SomanetNodeElementContainer>();
    SomanetNodeElementContainer currentSomanetNode;

    private Element rootElement;
    private Element nameElement;
    private Element declarationsElement;
    private Element packagesElement;
    private Element xScopeNodesElement;
    private Element linksElement;
    private Element externalDevicesElement;
    private Element JTAGChainElement;

    public PlatformFile() {
        init();
    }

    public void init() {

        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        try {
            DocumentBuilder builder = factory.newDocumentBuilder();
            document = builder.newDocument();

        } catch (ParserConfigurationException e) {
            e.printStackTrace();
        }

        rootElement = (Element) document.createElement("Network");
        document.appendChild(rootElement);

        nameElement = document.createElement("Name");
        nameElement.setTextContent("Complex Node (Generated by OBLAC IDE)");
        rootElement.appendChild(nameElement);

        declarationsElement = document.createElement("Declarations");
        rootElement.appendChild(declarationsElement);

        declarationsElement.appendChild(document.createElement("Declaration"));

        packagesElement = document.createElement("Packages");
        rootElement.appendChild(packagesElement);


        linksElement = document.createElement("Links");
        rootElement.appendChild(linksElement);

        externalDevicesElement = document.createElement("ExternalDevices");
        rootElement.appendChild(externalDevicesElement);

        JTAGChainElement = document.createElement("JTAGChain");
        rootElement.appendChild(JTAGChainElement);

        // SOMANET C21 has some additional Node for xSCOPE
        xScopeNodesElement = document.createElement("Nodes");
        rootElement.appendChild(xScopeNodesElement);

    }

    public void addSomanetNode(SomanetDeviceType somanetDeviceType) {

        Document sourceDocument = null;

        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        try {
            DocumentBuilder builder = factory.newDocumentBuilder();
            sourceDocument = builder.parse(new FileInputStream("/home/afeher/workspace-java/SOMANET-platform-file-generator/resources/SOMANET-" + somanetDeviceType.name() + ".xn"));

        } catch (ParserConfigurationException e) {
            e.printStackTrace();
        } catch (SAXException e) {
            e.printStackTrace();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

        SomanetNodeElementContainer somanetNode = new SomanetNodeElementContainer(somanetDeviceType);
        currentSomanetNode = somanetNode;
        somanetNodes.add(currentSomanetNode);

        //Only needed for C21
        Integer nSourceNodeElemens = sourceDocument.getElementsByTagName("Node").getLength();
        for (int i = 0; i < nSourceNodeElemens; i++) {
            Element xScopeNodeElement = (Element) sourceDocument.getElementsByTagName("Node").item(i);
            if (xScopeNodeElement.getAttribute("Type").startsWith("device:")) {
                xScopeNodesElement.appendChild(document.adoptNode(xScopeNodeElement));
                somanetNode.addElements("Nodes", xScopeNodeElement);
            }
        }

        importElements(sourceDocument, somanetNode, "Packages", "Package");
        importElements(sourceDocument, somanetNode, "Links", "Link");
        importElements(sourceDocument, somanetNode, "ExternalDevices", "Device");
        importElements(sourceDocument, somanetNode, "JTAGChain", "JTAGDevice");
        updateIdsAndNames();

    }

    public void addSomanetNode(SomanetDeviceType somanetDeviceType, SomanetDXLink somanetDXLink1, SomanetDXLink somanetDXLink2) {
        addSomanetNode(somanetDeviceType);

        linksElement.appendChild(document.createTextNode("\n\n"));
        linksElement.appendChild(document.createComment("##### DX Connection between SOMANET Node #" + (somanetNodes.size() - 2) + " and  #" + (somanetNodes.size() - 1) + " #####"));

        Element newLink = document.createElement("Link");
        newLink.setAttribute("Encoding", "2wire");
        newLink.setAttribute("Delays", "4,4");
        linksElement.appendChild(newLink);

        Element newLinkEndpoint1 = document.createElement("LinkEndpoint");
        newLink.appendChild(newLinkEndpoint1);

        Element newLinkEndpoint2 = document.createElement("LinkEndpoint");
        newLink.appendChild(newLinkEndpoint2);

        switch (somanetDXLink1) {
            case COM_A:
                newLinkEndpoint1.setAttribute("Link", "XLA");
                newLinkEndpoint1.setAttribute("NodeId", somanetNodes.get(somanetNodes.size() - 2).getComNodeId());
                break;
            case COM_B:
                newLinkEndpoint1.setAttribute("Link", "XLB");
                newLinkEndpoint1.setAttribute("NodeId", somanetNodes.get(somanetNodes.size() - 2).getComNodeId());
                break;
            case IFM_A:
                newLinkEndpoint1.setAttribute("Link", "XLA");
                newLinkEndpoint1.setAttribute("NodeId", somanetNodes.get(somanetNodes.size() - 2).getIfmNodeId());
                break;
            case IFM_B:
                newLinkEndpoint1.setAttribute("Link", "XLB");
                newLinkEndpoint1.setAttribute("NodeId", somanetNodes.get(somanetNodes.size() - 2).getIfmNodeId());
                break;
        }

        switch (somanetDXLink2) {
            case COM_A:
                newLinkEndpoint2.setAttribute("Link", "XLA");
                newLinkEndpoint2.setAttribute("NodeId", currentSomanetNode.getComNodeId());
                break;
            case COM_B:
                newLinkEndpoint2.setAttribute("Link", "XLB");
                newLinkEndpoint2.setAttribute("NodeId", currentSomanetNode.getComNodeId());
                break;
            case IFM_A:
                newLinkEndpoint2.setAttribute("Link", "XLA");
                newLinkEndpoint2.setAttribute("NodeId", currentSomanetNode.getIfmNodeId());
                break;
            case IFM_B:
                newLinkEndpoint2.setAttribute("Link", "XLB");
                newLinkEndpoint2.setAttribute("NodeId", currentSomanetNode.getIfmNodeId());
                break;
        }

    }

    private void importElements(Document sourceDocument, SomanetNodeElementContainer somanetNode, String destination, String name) {
        // Get the one and only Packages XML element
        Element destinationElement = getFirstElementByTagName(document, destination);

        // Create comment showing the START of the section belonging to SOMANET node added
        destinationElement.appendChild(document.createTextNode("\n\n"));
        destinationElement.appendChild(document.createComment("##### " + getFirstElementByTagName(sourceDocument, "Name").getTextContent() + " Node #" + (somanetNodes.size() - 1) + " - " + destination + " START #####"));

        for (Element sourceElement : getChildElementsByTagName(getFirstElementByTagName(sourceDocument, destination), name)) {
            Element newXMLPackageElement = (Element) document.adoptNode(sourceElement);
            destinationElement.appendChild(newXMLPackageElement);
            somanetNode.addElements(destination, newXMLPackageElement);
        }

        // Create comment showing the END of the section belonging to SOMANET node added
        destinationElement.appendChild(document.createComment("##### " + getFirstElementByTagName(sourceDocument, "Name").getTextContent() + " Node #" + (somanetNodes.size()-1) + " - " + destination + " END #####"));
}
    
    public static Element getFirstElementByTagName(Node parentElement, String tagName){
        if (parentElement instanceof Document){
            parentElement= ((Document) parentElement).getDocumentElement();
        }
        Element parentElement_help = (Element) parentElement;
        return (Element) parentElement_help.getElementsByTagName(tagName).item(0);
    }

    public static List<Element> getChildElementsByTagName(Node parentElement, String tagName) {
        ArrayList<Element> childElements = new ArrayList<>();
        for (int i = 0; i < parentElement.getChildNodes().getLength(); i++) {

            if (parentElement.getChildNodes().item(i).getNodeType() == Node.ELEMENT_NODE){
                Element child = (Element) parentElement.getChildNodes().item(i);

                if (child.getTagName().equals(tagName)) {
                    childElements.add(child);
                }
            }
        }
        return childElements;
    }

    private void updateIdsAndNames() {

        for (Element linkElement : currentSomanetNode.getLinkElements()) {
            for (int i = 0; i < linkElement.getElementsByTagName("LinkEndpoint").getLength(); i++) {
                Element linkEndpointElement = (Element) linkElement.getElementsByTagName("LinkEndpoint").item(i);
                linkEndpointElement.setAttribute("NodeId", Integer.toString(Integer.valueOf(linkEndpointElement.getAttribute("NodeId")) + globalXMLNodeCounter));
            }
        }

        for (Element deviceElement : currentSomanetNode.getExternalDeviceElements()) {

            if (deviceElement.getAttribute("Name").equals("bootFlash")) {
                deviceElement.setAttribute("NodeId", Integer.toString(Integer.valueOf(deviceElement.getAttribute("NodeId")) + globalXMLNodeCounter));
                deviceElement.setAttribute("Name", deviceElement.getAttribute("Name") + "_" + Integer.toString(somanetNodes.size() - 1));

                for (int i = 0; i < deviceElement.getElementsByTagName("Attribute").getLength(); i++) {
                    Element portElement = (Element) deviceElement.getElementsByTagName("Attribute").item(i);
                    portElement.setAttribute("Value", portElement.getAttribute("Value") + "_" + Integer.toString(somanetNodes.size()-1));
                }
            }
        }

        for (Element e : currentSomanetNode.getJTAGChainElements()) {
            e.setAttribute("NodeId", Integer.toString(Integer.valueOf(e.getAttribute("NodeId")) + globalXMLNodeCounter));
        }

        if(currentSomanetNode.getNodeElements() != null){
        for (Element e : currentSomanetNode.getNodeElements()) {
            e.setAttribute("Id", Integer.toString(Integer.valueOf(e.getAttribute("Id")) + globalXMLNodeCounter));
        }
        }

        int packageNumber = 0;
        for (Element packageElement : currentSomanetNode.getPackageElements()) {

            // Update Package Id attribute
            packageElement.setAttribute("Id", Integer.toString(globalXMLPackageCounter + packageNumber));

            int nXMLNodeElements = packageElement.getElementsByTagName("Node").getLength();
            for (int j = 0; j < nXMLNodeElements; j++) {

                // Update Node Id attribute
                Element nodeElement = (Element) packageElement.getElementsByTagName("Node").item(j);
                nodeElement.setAttribute("Id", Integer.toString(globalXMLNodeCounter + j));

                // Update Tile Reference attribute
                Element tileElement = getFirstElementByTagName(nodeElement, "Tile");
                tileElement.setAttribute("Reference", "tile[" + Integer.toString(globalXMLNodeCounter + j) + "]");

                // Update (add SOMANET node number sufix) Port names
                for (int k = 0; k < tileElement.getElementsByTagName("Port").getLength(); k++) {
                    Element portElement = (Element) tileElement.getElementsByTagName("Port").item(k);
                    if (portElement != null) {
                        portElement.setAttribute("Name", portElement.getAttribute("Name") + "_" + Integer.toString(somanetNodes.size()-1));
                    }
                }

                // Update Boot -> Source Location attribute (add SOMANET node number sufix)
                // Update (add SOMANET node number sufix) Boot - Source
                Element bootElement = getFirstElementByTagName(nodeElement, "Boot");
                Element bootSourceElement = getFirstElementByTagName(bootElement, "Source");
                if (bootSourceElement.getAttribute("Location").startsWith("SPI:bootFlash")) {
                    bootSourceElement.setAttribute("Location", bootSourceElement.getAttribute("Location") + "_" + Integer.toString(somanetNodes.size()-1));
                }

            }
            globalXMLNodeCounter += nXMLNodeElements;
            packageNumber++;
        }
        globalXMLPackageCounter += packageNumber;
        getFirstElementByTagName(declarationsElement, "Declaration").setTextContent("tileref tile[" + globalXMLNodeCounter.toString() + "]");

    }

    public void writeToFile(String fileName) {
        try {
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            DOMSource domSource = new DOMSource(document);
            StreamResult result = new StreamResult(fileName);
            transformer.transform(domSource, result);
        } catch (TransformerException e) {
            e.printStackTrace();
        }
    }

}
