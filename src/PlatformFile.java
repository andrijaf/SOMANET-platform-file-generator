import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.xml.sax.SAXException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.*;

/**
 * Created by afeher on 9/22/14.
 */
public class PlatformFile {

    /* XML Tags (Elements) of interest */
    public static String TAG_NETWORK = "Network";
    public static String TAG_DECLARATIONS = "Declarations";
    public static String TAG_DECLARATION = "Declaration";
    public static String TAG_PACKAGES = "Packages";
    public static String TAG_PACKAGE = "Package";
    public static String TAG_NODES = "Nodes";
    public static String TAG_NODE = "Node";
    public static String TAG_TILE = "Tile";
    public static String TAG_LINKS = "Links";
    public static String TAG_LINK = "Link";
    public static String TAG_PORT = "Port";
    public static String TAG_LINKENDPOINT = "LinkEndpoint";
    public static String TAG_EXTERNALDEVICES = "ExternalDevices";
    public static String TAG_DEVICE = "Device";
    public static String TAG_JTAGCHAIN = "JTAGChain";
    public static String TAG_JTAGDEVICE = "JTAGDevice";

    /* XML Tags (Elements) of interest */
    public static String ATR_NODEID = "NodeId";

    private Document document = null;
    private Integer globalXMLPackageCounter = 0;
    private Integer globalXMLNodeCounter = 0;

    List<SomanetNodePlatformFile> somanetNodes = new ArrayList<SomanetNodePlatformFile>();
    SomanetNodePlatformFile currentSomanetNode;

    private Element rootElement;
    private Element nameElement;
    private Element declarationsElement;
    private Element packagesElement;
    private Element xScopeNodesElement;
    private Element linksElement;
    private Element externalDevicesElement;
    private Element JTAGChainElement;

    public PlatformFile() {
        init();
    }

    public void init() {

        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        try {
            DocumentBuilder builder = factory.newDocumentBuilder();
            document = builder.newDocument();

        } catch (ParserConfigurationException e) {
            e.printStackTrace();
        }

        rootElement = (Element) document.createElement(TAG_NETWORK);
        document.appendChild(rootElement);

        nameElement = document.createElement("Name");
        nameElement.setTextContent("Complex Node (Generated by OBLAC IDE)");
        rootElement.appendChild(nameElement);

        declarationsElement = document.createElement(TAG_DECLARATIONS);
        rootElement.appendChild(declarationsElement);

        declarationsElement.appendChild(document.createElement(TAG_DECLARATION));

        packagesElement = document.createElement(TAG_PACKAGES);
        rootElement.appendChild(packagesElement);


        linksElement = document.createElement(TAG_LINKS);
        rootElement.appendChild(linksElement);

        externalDevicesElement = document.createElement(TAG_EXTERNALDEVICES);
        rootElement.appendChild(externalDevicesElement);

        JTAGChainElement = document.createElement(TAG_JTAGCHAIN);
        rootElement.appendChild(JTAGChainElement);

        // SOMANET C21 has some additional Node for xSCOPE
        xScopeNodesElement = document.createElement(TAG_NODES);
        rootElement.appendChild(xScopeNodesElement);

    }

    public void addSomanetNode(SomanetCoreDeviceType somanetCoreDeviceType) {

        Document sourceDocument = null;

        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        try {
            DocumentBuilder builder = factory.newDocumentBuilder();
            sourceDocument = builder.parse(new FileInputStream("/home/afeher/workspace-java/SOMANET-platform-file-generator/resources/SOMANET-" + somanetCoreDeviceType.name() + ".xn"));

        } catch (ParserConfigurationException e) {
            e.printStackTrace();
        } catch (SAXException e) {
            e.printStackTrace();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

        SomanetNodePlatformFile somanetNode = new SomanetNodePlatformFile(somanetCoreDeviceType);
        currentSomanetNode = somanetNode;
        somanetNodes.add(currentSomanetNode);

        //Only needed for C21
        Integer nSourceNodeElemens = sourceDocument.getElementsByTagName(TAG_NODE).getLength();
        for (int i = 0; i < nSourceNodeElemens; i++) {
            Element xScopeNodeElement = (Element) sourceDocument.getElementsByTagName(TAG_NODE).item(i);
            if (xScopeNodeElement.getAttribute("Type").startsWith("device:")) {
                xScopeNodesElement.appendChild(document.adoptNode(xScopeNodeElement));
                somanetNode.addElements(xScopeNodeElement);
            }
        }

        importElements(sourceDocument, somanetNode, TAG_PACKAGES, TAG_PACKAGE);
        importElements(sourceDocument, somanetNode, TAG_LINKS, TAG_LINK);
        importElements(sourceDocument, somanetNode, TAG_EXTERNALDEVICES, TAG_DEVICE);
        importElements(sourceDocument, somanetNode, TAG_JTAGCHAIN, TAG_JTAGDEVICE);
        updateIdsAndNames();

    }

    public void addSomanetNode(SomanetCoreDeviceType somanetCoreDeviceType, SomanetNodeDXLinkEndpoint somanetNodeDXLinkEndpoint1, SomanetNodeDXLinkEndpoint somanetNodeDXLinkEndpoint2) {
        addSomanetNode(somanetCoreDeviceType);

        linksElement.appendChild(document.createComment("##### DX Link between SOMANET Node #" + (somanetNodes.size() - 2) + "(" + somanetNodeDXLinkEndpoint1.name() + ") and SOMANET Node #" + (somanetNodes.size() - 1) + "(" + somanetNodeDXLinkEndpoint2.name() + ") #####"));

                Element newLink = document.createElement(TAG_LINK);
        newLink.setAttribute("Encoding", "2wire");
        newLink.setAttribute("Delays", "4,4");
        linksElement.appendChild(newLink);

        Element newLinkEndpoint1 = document.createElement(TAG_LINKENDPOINT);
        newLink.appendChild(newLinkEndpoint1);

        Element newLinkEndpoint2 = document.createElement(TAG_LINKENDPOINT);
        newLink.appendChild(newLinkEndpoint2);

        switch (somanetNodeDXLinkEndpoint1) {
            case COM_A:
                newLinkEndpoint1.setAttribute(TAG_LINK, "XLA");
                newLinkEndpoint1.setAttribute(ATR_NODEID, somanetNodes.get(somanetNodes.size() - 2).getComNodeId());
                break;
            case COM_B:
                newLinkEndpoint1.setAttribute(TAG_LINK, "XLB");
                newLinkEndpoint1.setAttribute(ATR_NODEID, somanetNodes.get(somanetNodes.size() - 2).getComNodeId());
                break;
            case IFM_A:
                newLinkEndpoint1.setAttribute(TAG_LINK, "XLA");
                newLinkEndpoint1.setAttribute(ATR_NODEID, somanetNodes.get(somanetNodes.size() - 2).getIfmNodeId());
                break;
            case IFM_B:
                newLinkEndpoint1.setAttribute(TAG_LINK, "XLB");
                newLinkEndpoint1.setAttribute(ATR_NODEID, somanetNodes.get(somanetNodes.size() - 2).getIfmNodeId());
                break;
        }

        switch (somanetNodeDXLinkEndpoint2) {
            case COM_A:
                newLinkEndpoint2.setAttribute(TAG_LINK, "XLA");
                newLinkEndpoint2.setAttribute(ATR_NODEID, currentSomanetNode.getComNodeId());
                break;
            case COM_B:
                newLinkEndpoint2.setAttribute(TAG_LINK, "XLB");
                newLinkEndpoint2.setAttribute(ATR_NODEID, currentSomanetNode.getComNodeId());
                break;
            case IFM_A:
                newLinkEndpoint2.setAttribute(TAG_LINK, "XLA");
                newLinkEndpoint2.setAttribute(ATR_NODEID, currentSomanetNode.getIfmNodeId());
                break;
            case IFM_B:
                newLinkEndpoint2.setAttribute(TAG_LINK, "XLB");
                newLinkEndpoint2.setAttribute(ATR_NODEID, currentSomanetNode.getIfmNodeId());
                break;
        }

    }

    private void importElements(Document sourceDocument, SomanetNodePlatformFile somanetNode, String destination, String name) {
        // Get the one and only Packages XML element
        Element destinationElement = getFirstElementByTagName(document, destination);

        // Create comment showing the START of the section belonging to SOMANET node added
        destinationElement.appendChild(document.createComment("##### " + getFirstElementByTagName(sourceDocument, "Name").getTextContent() + " Node #" + (somanetNodes.size() - 1) + " - " + destination + " START #####"));

        for (Element sourceElement : getChildElementsByTagName(getFirstElementByTagName(sourceDocument, destination), name)) {
            Element importedElement = (Element) document.adoptNode(sourceElement);
            destinationElement.appendChild(importedElement);
            somanetNode.addElements(importedElement);
        }

        // Create comment showing the END of the section belonging to SOMANET node added
        destinationElement.appendChild(document.createComment("##### " + getFirstElementByTagName(sourceDocument, "Name").getTextContent() + " Node #" + (somanetNodes.size() - 1) + " - " + destination + " END #####"));
    }

    public static Element getFirstElementByTagName(Node parentElement, String tagName) {
        if (parentElement instanceof Document) {
            parentElement = ((Document) parentElement).getDocumentElement();
        }
        Element parentElement_help = (Element) parentElement;
        return (Element) parentElement_help.getElementsByTagName(tagName).item(0);
    }

    public static List<Element> getChildElementsByTagName(Node parentElement, String tagName) {
        ArrayList<Element> childElements = new ArrayList<>();
        for (int i = 0; i < parentElement.getChildNodes().getLength(); i++) {

            if (parentElement.getChildNodes().item(i).getNodeType() == Node.ELEMENT_NODE) {
                Element child = (Element) parentElement.getChildNodes().item(i);

                if (child.getTagName().equals(tagName)) {
                    childElements.add(child);
                }
            }
        }
        return childElements;
    }

    private void updateIdsAndNames() {

        for (Element linkElement : currentSomanetNode.getElementsByTagName(TAG_LINK)) {
            for (int i = 0; i < linkElement.getElementsByTagName(TAG_LINKENDPOINT).getLength(); i++) {
                Element linkEndpointElement = (Element) linkElement.getElementsByTagName(TAG_LINKENDPOINT).item(i);
                linkEndpointElement.setAttribute(ATR_NODEID, Integer.toString(Integer.valueOf(linkEndpointElement.getAttribute(ATR_NODEID)) + globalXMLNodeCounter));
            }
        }

        for (Element deviceElement : currentSomanetNode.getElementsByTagName(TAG_DEVICE)) {

            if (deviceElement.getAttribute("Name").equals("bootFlash")) {
                deviceElement.setAttribute(ATR_NODEID, Integer.toString(Integer.valueOf(deviceElement.getAttribute(ATR_NODEID)) + globalXMLNodeCounter));
                setAttributeSuffix(deviceElement, "Name", somanetNodes.size() - 1);

                for (int i = 0; i < deviceElement.getElementsByTagName("Attribute").getLength(); i++) {
                    Element portElement = (Element) deviceElement.getElementsByTagName("Attribute").item(i);
                    setAttributeSuffix(portElement, "Value", somanetNodes.size() - 1);
                }
            }
        }

        for (Element e : currentSomanetNode.getElementsByTagName(TAG_JTAGDEVICE)) {
            e.setAttribute(ATR_NODEID, Integer.toString(Integer.valueOf(e.getAttribute(ATR_NODEID)) + globalXMLNodeCounter));
        }

        if (currentSomanetNode.getElementsByTagName(TAG_NODE) != null) {
            for (Element e : currentSomanetNode.getElementsByTagName(TAG_NODE)) {
                e.setAttribute("Id", Integer.toString(Integer.valueOf(e.getAttribute("Id")) + globalXMLNodeCounter));
            }
        }

        int packageNumber = 0;
        for (Element packageElement : currentSomanetNode.getElementsByTagName(TAG_PACKAGE)) {

            // Update Package Id attribute
            packageElement.setAttribute("Id", Integer.toString(globalXMLPackageCounter + packageNumber));

            int nXMLNodeElements = packageElement.getElementsByTagName(TAG_NODE).getLength();
            for (int j = 0; j < nXMLNodeElements; j++) {

                // Update Node Id attribute
                Element nodeElement = (Element) packageElement.getElementsByTagName(TAG_NODE).item(j);
                nodeElement.setAttribute("Id", Integer.toString(globalXMLNodeCounter + j));

                // Update Tile Reference attribute
                Element tileElement = getFirstElementByTagName(nodeElement, TAG_TILE);
                tileElement.setAttribute("Reference", "tile[" + Integer.toString(globalXMLNodeCounter + j) + "]");

                // Update (add SOMANET node number sufix) Port names
                for (int k = 0; k < tileElement.getElementsByTagName(TAG_PORT).getLength(); k++) {
                    Element portElement = (Element) tileElement.getElementsByTagName(TAG_PORT).item(k);
                    if (portElement != null) {
                        setAttributeSuffix(portElement, "Name", somanetNodes.size() - 1);
                    }
                }

                // Update Boot -> Source Location attribute (add SOMANET node number sufix)
                // Update (add SOMANET node number sufix) Boot - Source
                Element bootElement = getFirstElementByTagName(nodeElement, "Boot");
                Element bootSourceElement = getFirstElementByTagName(bootElement, "Source");
                if (bootSourceElement.getAttribute("Location").startsWith("SPI:bootFlash")) {
                    setAttributeSuffix(bootSourceElement, "Location", somanetNodes.size() - 1);
                }

            }
            globalXMLNodeCounter += nXMLNodeElements;
            packageNumber++;
        }
        globalXMLPackageCounter += packageNumber;
        getFirstElementByTagName(declarationsElement, TAG_DECLARATION).setTextContent("tileref tile[" + globalXMLNodeCounter.toString() + "]");

    }

    public static void setAttributeSuffix(Element element, String attribute, String suffix) {
        element.setAttribute("Name", element.getAttribute(attribute) + "_" + suffix);
    }

    public static void setAttributeSuffix(Element element, String attribute, Integer suffix) {
        setAttributeSuffix(element, attribute, suffix.toString());
    }

    public void writeToFile(String fileName) {

        try {
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "no");
            transformer.setOutputProperty(OutputKeys.METHOD, "xml");
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
            transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");
            DOMSource domSource = new DOMSource(document);
            StreamResult result = new StreamResult(fileName);
            transformer.transform(domSource, result);
        } catch (TransformerException e) {
            e.printStackTrace();
        }
    }

}
